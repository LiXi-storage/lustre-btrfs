Index: linux-3.10.0-123.el7.x86_64/fs/ext4/ext4.h
===================================================================
--- linux-3.10.0-123.el7.x86_64.orig/fs/ext4/ext4.h
+++ linux-3.10.0-123.el7.x86_64/fs/ext4/ext4.h
@@ -971,6 +971,7 @@ struct ext4_inode_info {
 #define EXT4_MOUNT_QUOTA		0x80000 /* Some quota option set */
 #define EXT4_MOUNT_USRQUOTA		0x100000 /* "old" user quota */
 #define EXT4_MOUNT_GRPQUOTA		0x200000 /* "old" group quota */
+#define EXT4_MOUNT_EXTENTS		0x400000 /* Extents support */
 #define EXT4_MOUNT_DIOREAD_NOLOCK	0x400000 /* Enable support for dio read nolocking */
 #define EXT4_MOUNT_JOURNAL_CHECKSUM	0x800000 /* Journal checksums */
 #define EXT4_MOUNT_JOURNAL_ASYNC_COMMIT	0x1000000 /* Journal Async Commit */
Index: linux-3.10.0-123.el7.x86_64/fs/ext4/ext4_jbd2.h
===================================================================
--- linux-3.10.0-123.el7.x86_64.orig/fs/ext4/ext4_jbd2.h
+++ linux-3.10.0-123.el7.x86_64/fs/ext4/ext4_jbd2.h
@@ -35,7 +35,7 @@
 
 #define EXT4_SINGLEDATA_TRANS_BLOCKS(sb)				\
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
-	 ? 20U : 8U)
+	 || test_opt(sb, EXTENTS) ? 20U : 8U)
 
 #define ext4_journal_dirty_metadata(handle, bh)  \
 		ext4_handle_dirty_metadata(handle, NULL, bh)
Index: linux-3.10.0-123.el7.x86_64/fs/ext4/extents.c
===================================================================
--- linux-3.10.0-123.el7.x86_64.orig/fs/ext4/extents.c
+++ linux-3.10.0-123.el7.x86_64/fs/ext4/extents.c
@@ -2901,7 +2901,7 @@ void ext4_ext_init(struct super_block *s
 	 * possible initialization would be here
 	 */
 
-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 #if defined(AGGRESSIVE_TEST) || defined(CHECK_BINSEARCH) || defined(EXTENTS_STATS)
 		printk(KERN_INFO "EXT4-fs: file extents enabled"
 #ifdef AGGRESSIVE_TEST
@@ -2928,7 +2928,7 @@ void ext4_ext_init(struct super_block *s
  */
 void ext4_ext_release(struct super_block *sb)
 {
-	if (!EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+	if (!test_opt(sb, EXTENTS))
 		return;
 
 #ifdef EXTENTS_STATS
Index: linux-3.10.0-123.el7.x86_64/fs/ext4/ialloc.c
===================================================================
--- linux-3.10.0-123.el7.x86_64.orig/fs/ext4/ialloc.c
+++ linux-3.10.0-123.el7.x86_64/fs/ext4/ialloc.c
@@ -952,7 +952,7 @@ got:
 	if (err)
 		goto fail_free_drop;
 
-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 		/* set extent flag only for directory, file and normal symlink*/
 		if (S_ISDIR(mode) || S_ISREG(mode) || S_ISLNK(mode)) {
 			ext4_set_inode_flag(inode, EXT4_INODE_EXTENTS);
Index: linux-3.10.0-123.el7.x86_64/fs/ext4/migrate.c
===================================================================
--- linux-3.10.0-123.el7.x86_64.orig/fs/ext4/migrate.c
+++ linux-3.10.0-123.el7.x86_64/fs/ext4/migrate.c
@@ -440,13 +440,10 @@ int ext4_ext_migrate(struct inode *inode
 	__u32 goal;
 	uid_t owner[2];
 
-	/*
-	 * If the filesystem does not support extents, or the inode
-	 * already is extent-based, error out.
-	 */
-	if (!EXT4_HAS_INCOMPAT_FEATURE(inode->i_sb,
-				       EXT4_FEATURE_INCOMPAT_EXTENTS) ||
-	    (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)))
+	if (!test_opt(inode->i_sb, EXTENTS))
+		/*
+		 * if mounted with noextents we don't allow the migrate
+		 */
 		return -EINVAL;
 
 	if (S_ISLNK(inode->i_mode) && inode->i_blocks == 0)
Index: linux-3.10.0-123.el7.x86_64/fs/ext4/super.c
===================================================================
--- linux-3.10.0-123.el7.x86_64.orig/fs/ext4/super.c
+++ linux-3.10.0-123.el7.x86_64/fs/ext4/super.c
@@ -1165,6 +1165,7 @@ enum {
 	Opt_no_mbcache,
 	Opt_discard, Opt_nodiscard, Opt_init_itable, Opt_noinit_itable,
 	Opt_max_dir_size_kb,
+	Opt_extents, Opt_noextents,
 };
 
 static const match_table_t tokens = {
@@ -1243,6 +1244,8 @@ static const match_table_t tokens = {
 	{Opt_init_itable, "init_itable"},
 	{Opt_noinit_itable, "noinit_itable"},
 	{Opt_max_dir_size_kb, "max_dir_size_kb=%u"},
+	{Opt_extents, "extents"},
+	{Opt_noextents, "noextents"},
 	{Opt_removed, "check=none"},	/* mount option from ext2/3 */
 	{Opt_removed, "nocheck"},	/* mount option from ext2/3 */
 	{Opt_removed, "reservation"},	/* mount option from ext2/3 */
@@ -1341,6 +1344,7 @@ static int clear_qf_name(struct super_bl
 	return 1;
 }
 #endif
+	ext4_fsblk_t last_block;
 
 #define MOPT_SET	0x0001
 #define MOPT_CLEAR	0x0002
@@ -1441,6 +1445,8 @@ static const struct mount_opts {
 	{Opt_jqfmt_vfsv0, QFMT_VFS_V0, MOPT_QFMT},
 	{Opt_jqfmt_vfsv1, QFMT_VFS_V1, MOPT_QFMT},
 	{Opt_max_dir_size_kb, 0, MOPT_GTE0},
+	{Opt_extents, EXT4_MOUNT_EXTENTS, MOPT_SET},
+	{Opt_noextents, EXT4_MOUNT_EXTENTS, MOPT_CLEAR},
 	{Opt_err, 0, 0}
 };
 
@@ -1485,6 +1491,32 @@ static int handle_mount_opt(struct super
 	case Opt_force_over_128tb:
 		force_over_128tb = 1;
 		break;
+	case Opt_extents:
+		if (!EXT4_HAS_INCOMPAT_FEATURE(sb,
+			EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+			ext4_warning(sb, "extents feature not enabled "
+					 "on this filesystem, use tune2fs");
+			return 0;
+		}
+		set_opt(sb, EXTENTS);
+		break;
+	case Opt_noextents:
+		/*
+		 * When e2fsprogs support resizing an already existing
+		 * ext4 file system to greater than 2**32 we need to
+		 * add support to block allocator to handle growing
+		 * already existing block  mapped inode so that blocks
+		 * allocated for them fall within 2**32
+		 */
+		last_block = ext4_blocks_count(sbi->s_es) - 1;
+		if (last_block  > 0xffffffffULL) {
+			printk(KERN_ERR "EXT4-fs: Filesystem too "
+					"large to mount with "
+					"-o noextents options\n");
+			return 0;
+		}
+		clear_opt(sb, EXTENTS);
+		break;
 	}
 
 	for (m = ext4_mount_opts; m->token != Opt_err; m++)
@@ -3479,6 +3511,14 @@ static int ext4_fill_super(struct super_
 		set_opt(sb, BARRIER);
 
 	/*
+	 * turn on extents feature by default in ext4 filesystem
+	 * only if feature flag already set by mkfs or tune2fs.
+	 * Use -o noextents to turn it off
+	 */
+	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+		set_opt(sb, EXTENTS);
+
+	/*
 	 * enable delayed allocation by default
 	 * Use -o nodelalloc to turn it off
 	 */
