SUBDIRS := @LDISKFS_SUBDIR@ \
	. \
	@SNMP_SUBDIR@ \
	@LUSTREIOKIT_SUBDIR@ \
	@LIBCFS_SUBDIR@ \
	lnet \
	lustre \
	@BTRFS_SUBDIR@

DIST_SUBDIRS := ldiskfs \
	@SNMP_DIST_SUBDIR@ \
	lustre-iokit \
	@LIBCFS_SUBDIR@ \
	lnet \
	lustre \
	config contrib \
	btrfs

AUTOMAKE_OPTIONS = foreign

FIND_TAG_FILES_CMD = find $(top_srcdir) \
		     -path $(top_srcdir)/ldiskfs/linux-stage \
		     -prune -false -o -type f -name '*.[hc]'

# these empty rules are needed so that automake doesn't add its own
# recursive rules
etags-recursive:

ctags-recursive:

tags-recursive:

TAGS: etags

tags: ctags etags

etags:
	$(RM) $(top_srcdir)/TAGS
	ETAGSF=`etags --version | grep -iq exuberant && \
		echo "-I __initdata,__exitdata,EXPORT_SYMBOL"`; \
	$(FIND_TAG_FILES_CMD) | xargs etags $$ETAGSF -a

ctags:
	$(RM) $(top_srcdir)/tags
	CTAGSF=`ctags --version | grep -iq exuberant && \
		echo "-I __initdata,__exitdata,EXPORT_SYMBOL"`; \
	$(FIND_TAG_FILES_CMD) | xargs ctags $$CTAGSF -a

cscope-recursive:

cscope:
	$(RM) $(top_srcdir)/cscope*.out $(top_srcdir)/cscope.files
	$(FIND_TAG_FILES_CMD) > cscope.files
	cscope -bRq

mkid:
	$(FIND_TAG_FILES_CMD) | xargs mkid


doxygen:  doxygen-api doxygen-ref

doxygen-%: build/doxyfile.%
	doxygen $<

if MODULES
.PHONY: ldiskfs-sources lustre-sources btrfs-sources

ldiskfs-sources:
if LDISKFS_ENABLED
	$(MAKE) sources -C @LDISKFS_SUBDIR@ || exit $$?
endif

lustre-sources:
	$(MAKE) sources -C lustre || exit $$?

btrfs-sources:
if BTRFS_ENABLED
	$(MAKE) sources -C @BTRFS_SUBDIR@ || exit $$?
endif

if LINUX
all-am: modules

modules: ldiskfs-sources lustre-sources btrfs-sources module-symvers
	$(MAKE) CC="$(CC)" $(CROSS_VARS) -C $(LINUX_OBJ)	     \
	-f $(PWD)/build/Makefile LUSTRE_LINUX_CONFIG=$(LINUX_CONFIG) \
	LINUXINCLUDE='-I$$(srctree)/arch/$$(SRCARCH)/include -Iarch/$$(SRCARCH)/include/generated -Iinclude $$(if $$(KBUILD_SRC),-Iinclude2 -I$$(srctree)/include) -I$$(srctree)/arch/$$(SRCARCH)/include/uapi -Iarch/$$(SRCARCH)/include/generated/uapi -I$$(srctree)/include/uapi -Iinclude/generated/uapi -include $(CONFIG_INCLUDE)' \
	$(MODULE_TARGET)=$(PWD) -o tmp_include_depends -o scripts -o \
	include/config/MARKER $@
endif # LINUX

endif # MODULES

dist-hook:
	find $(distdir) -name .deps -o \
			-name CVS -o \
			-name .svn -o \
			-name .git -o \
			-name .#* -exec rm -rf {} \;
	$(MAKE) $(AM_MAKEFLAGS) \
		top_distdir="$(top_distdir)" distdir="$(distdir)" \
		module-dist-hook

EXTRA_DIST = @PACKAGE_TARNAME@.spec	\
	build/Makefile 			\
	build/Rules.in			\
	build/gen_filelist.sh

rpms: @PACKAGE_TARNAME@.spec dist Makefile
	rpmbuild @RPMBUILD_BINARY_ARGS@ -ta $(distdir).tar.gz

srpm: @PACKAGE_TARNAME@.spec dist Makefile
	rpmbuild @RPMBUILD_SOURCE_ARGS@ -ts $(distdir).tar.gz

# In the debs target, first make sure what's in the changelog reflects
# the software version.  Here's how we could dig the version out of the
# autoconf version file directly:
# lversion=$$(sed -ne 's/m4_define(\[LUSTRE_[A-Z][A-Z]*\],\[\([0-9][0-9]*\)\])$$/\1/p'
#	lustre/autoconf/lustre-version.ac | tr '\n' '.' | sed -e 's/.$//');
#
# However, one cannot really run "make debs" without having done a
# configure first, so we could use the easier method of digging the
# version out of the config.h file.
debs:
	lversion=$$(sed -ne 's/^#define VERSION "\(.*\)"$$/\1/p' config.h); \
	cversion=$$(sed -ne '1s/^lustre (\(.*\)-[0-9][0-9]*).*$$/\1/p' debian/changelog); \
	if [ "$$lversion" != "$$cversion" ]; then \
		echo -e "1i\nlustre ($$lversion-1) unstable; urgency=low\n\n  * Automated changelog entry update\n\n -- Brian J. Murrell <brian@interlinx.bc.ca>  $$(date -R)\n\n.\nwq" | ed debian/changelog; \
	fi; \
	rm -rf debs
	dpkg-buildpackage -I.git -I\*.out[0-9]\* -I\*.swp || { \
		rc=$${PIPESTATUS[0]}; \
		[ $${rc} -gt 1 ] && exit $${rc}; \
		exit 0; \
	}
	export KPKG_DEST_DIR="$$(pwd)/.." && \
	version=$$(sed -ne '1s/^lustre (\(.*\)).*$$/\1/p' debian/changelog) && \
	rm -rf debian/tmp/modules-deb && \
	mkdir debian/tmp/modules-deb && \
	pushd debian/tmp/modules-deb && \
	dpkg -x ../../../../lustre-source_$${version}_all.deb $$(pwd) && \
	mkdir usr_src/ && \
	tar -C usr_src/ -xjf usr/src/lustre.tar.bz2 && \
	chmod 755 usr_src/modules/lustre/debian/rules && \
	mkdir -p usr_share_modass && \
	ln -s /usr/share/modass/include/ usr_share_modass/ && \
	ln -s /usr/share/modass/packages/ usr_share_modass/ && \
	echo "lustre" > usr_share_modass/compliant.list && \
	export MA_DIR=$$(pwd)/usr_share_modass && \
	KVERS=$${KVERS:-$(LINUXRELEASE)} && \
	export KSRC_TREE=$(LINUX) && \
	KSRC=$${KSRC:-$(LINUX_OBJ)} && \
	m-a build $${KSRC:+-k $$KSRC} $${KVERS:+-l $$KVERS} -i -u $$(pwd) lustre && \
	popd && \
	VER=$$(sed -ne '1s/^lustre (\(.*-[0-9][0-9]*\)).*$$/\1/p' debian/changelog) && \
	mkdir -p debs && \
	mv ../linux-patch-lustre_$${VER}_all.deb ../lustre-dev_$${VER}_*.deb \
	   ../lustre-source_$${VER}_all.deb ../lustre-tests_$${VER}_*.deb \
	   ../lustre-utils_$${VER}_*.deb ../lustre_$${VER}.dsc \
	   ../lustre_$${VER}_*.changes ../lustre_$${VER}.tar.gz \
	   ../lustre-client-modules-$${KVERS}_$${VER}_*.deb debs/

EXTRA_DIST += config.h.in

if USES_DPKG
EXTRA_DIST += debian/*
endif

module-symvers-zfs:
if ZFS_ENABLED
	@if [ -f @SPL_OBJ@/@SPL_SYMBOLS@ ]; then \
		cat @SPL_OBJ@/@SPL_SYMBOLS@ >>@SYMVERFILE@; \
	elif [ -f @SPL_OBJ@/module/@SPL_SYMBOLS@ ]; then \
		cat @SPL_OBJ@/module/@SPL_SYMBOLS@ >>@SYMVERFILE@; \
	else \
		echo -e "\n" \
		"*** Missing spl symbols. Ensure you have built spl:\n" \
		"*** - @SPL_OBJ@/@SYMVERFILE@\n"; \
		exit 1; \
	fi
	@if [ -f @ZFS_OBJ@/@ZFS_SYMBOLS@ ]; then \
		cat @ZFS_OBJ@/@ZFS_SYMBOLS@ >>@SYMVERFILE@; \
	elif [ -f @ZFS_OBJ@/module/@ZFS_SYMBOLS@ ]; then \
		cat @ZFS_OBJ@/module/@ZFS_SYMBOLS@ >>@SYMVERFILE@; \
	else \
		echo -e "\n" \
		"*** Missing zfs symbols. Ensure you have built zfs:\n" \
		"*** - @ZFS_OBJ@/@SYMVERFILE@\n"; \
		exit 1; \
	fi
endif # ZFS_ENABLED

module-symvers: module-symvers-zfs

CSTK=/tmp/checkstack
CSTKO=/tmp/checkstack.orig

checkstack:
	[ -f ${CSTK} -a ! -s ${CSTKO} ] && mv -f ${CSTK} ${CSTKO} || true
	{ for MOD in $$(find . -name "*.ko"); do			     \
		objdump -d $$MOD | perl contrib/scripts/checkstack.pl;	     \
	  done } | grep -v " bug " | sort -nr | uniq > ${CSTK}
	[ -f ${CSTKO} ] && ! diff -u ${CSTKO} ${CSTK} || head -n 30 ${CSTK}

checkstack-update:
	[ -f ${CSTK} ] && mv -f ${CSTK} ${CSTKO}

checkstack-clean:
	rm -f ${CSTK} ${CSTKO}

module-dist-hook:
	@if [ -d .git ]; then \
		perl lustre/scripts/version_tag.pl \
			--make_META > $(distdir)/META; \
	elif [ -f META ]; then \
		cp META $(distdir)/META; \
	else \
		echo -e "\n" \
		"*** I have no idea how to create a META file in $(distdir).\n"\
		"*** Please file a bug at https://jira.hpdd.intel.com/\n"; \
		exit 1; \
	fi
